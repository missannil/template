{"version":3,"sources":["index.js","api/DefineComponent/index.js","api/DefineComponent/normalizeOptions/index.js","behaviors/BbeforeCreated.js","behaviors/BStore.js","utils/deepEqual.js","utils/isEmptyObject.js","api/InstanceInject/instanceConfig.js","api/DefineComponent/normalizeOptions/computedWatchHandle/index.js","api/DefineComponent/normalizeOptions/computedWatchHandle/computedUpdater.js","api/DefineComponent/normalizeOptions/computedWatchHandle/data-tracer.js","api/DefineComponent/normalizeOptions/computedWatchHandle/dependencesOptimize.js","api/DefineComponent/normalizeOptions/computedWatchHandle/getPathsValue.js","api/DefineComponent/normalizeOptions/computedWatchHandle/getPropertiesValue.js","api/DefineComponent/normalizeOptions/computedWatchHandle/initComputedAndGetCache.js","utils/assertNonNullable.js","utils/deepClone.js","api/DefineComponent/normalizeOptions/hijackHandle/index.js","api/DefineComponent/normalizeOptions/hijackHandle/isPageCheck.js","api/DefineComponent/normalizeOptions/hijackHandle/loadReceivedDataHandle.js","utils/InnerMarker.js","api/DefineComponent/normalizeOptions/hijackHandle/onLoadReceivedDataHandle.js","api/DefineComponent/normalizeOptions/initStore/index.js","api/DefineComponent/normalizeOptions/injectInfoHandler.js","api/DefineComponent/normalizeOptions/internalFieldProtection.js","api/DefineComponent/normalizeOptions/rootComponentOptionHandle.js","api/DefineComponent/normalizeOptions/customEventsHandle.js","api/DefineComponent/normalizeOptions/otherFieldsHandle.js","api/DefineComponent/normalizeOptions/sameFuncFieldsCollect.js","api/DefineComponent/normalizeOptions/sameFuncOptionsHandle.js","api/DefineComponent/normalizeOptions/subComponentsOptionHandle.js","api/navigateTo.js","api/RootComponent/index.js","api/SubComponent/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA,ACHA;AJaA,AENA,ADGA,AENA,ACHA;AJaA,AENA,ADGA,AENA,ACHA;AJaA,AKfA,AHSA,ADGA,AENA,ACHA;AJaA,AKfA,AHSA,ADGA,AENA,ACHA;AJaA,AKfA,AHSA,ACHA,ACHA;AELA,ANkBA,AKfA,AHSA,ACHA,ACHA;AELA,ANkBA,AKfA,AHSA,ACHA,ACHA;AELA,ANkBA,AKfA,AHSA,ACHA,ACHA;AGRA,ADGA,ANkBA,AKfA,AHSA,ACHA,ACHA;AGRA,ADGA,ANkBA,AKfA,AHSA,ACHA,ACHA;AGRA,ADGA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,AFMA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,AFMA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,AFMA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,AHSA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,AHSA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,AHSA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,ACHA,AJYA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,ACHA,AJYA,ANkBA,AKfA,AHSA,ACHA;AIXA,ACHA,ACHA,ACHA,AJYA,ANkBA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,ANkBA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,ANkBA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,ANkBA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,ACHA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,AV8BA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,AV8BA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,AV8BA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,ACHA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,ACHA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AZoCA,AENA,AWjCA,ACHA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,Af6CA,AENA,AWjCA,ACHA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,Af6CA,AENA,AWjCA,ACHA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,Af6CA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,AhBgDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,AhBgDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,AhBgDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AYpCA,AXiCA;AIXA,ACHA,ACHA,ACHA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AgBhDA,AJYA,AXiCA;AKdA,AENA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AgBhDA,AJYA,AXiCA;AKdA,AENA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AjBmDA,AENA,AgBhDA,AJYA,AXiCA;AKdA,AENA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AENA,AnByDA,AkBtDA,AJYA,AXiCA;AKdA,AENA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AENA,AnByDA,Ac1CA,AXiCA;AKdA,AENA,ACHA,ALeA,AMlBA,AGTA,ACHA,ACHA,AENA,AnByDA,AGTA;AKdA,AGTA,ALeA,AMlBA,AGTA,ACHA,ACHA,AENA,AnByDA,AoB5DA,AjBmDA;AKdA,AGTA,ALeA,AMlBA,AIZA,ACHA,AENA,AnByDA,AoB5DA,AjBmDA;AKdA,AGTA,ALeA,AMlBA,AIZA,ACHA,AENA,AnByDA,AoB5DA,AjBmDA;AKdA,AGTA,ALeA,AMlBA,AIZA,ACHA,AENA,AnByDA,AoB5DA,ACHA,AlBsDA;AQvBA,ALeA,AMlBA,AIZA,ACHA,AENA,AnByDA,AoB5DA,ACHA,AlBsDA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,AlBsDA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,ACHA,AnByDA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,ACHA,AnByDA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,ACHA,AnByDA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AKfA,AENA,AnByDA,AoB5DA,ACHA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AOrBA,AnByDA,AoB5DA,ACHA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AnByDA,AoB5DA,ACHA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AnByDA,AoB5DA,ACHA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AnByDA,AqB/DA,ACHA,ACHA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AnByDA,AqB/DA,ACHA,AGTA,AFMA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AnByDA,AqB/DA,ACHA,AGTA,AFMA,ApB4DA;AQvBA,ALeA,AMlBA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,ApB4DA;AS1BA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,AGTA;Ad2CA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,AGTA;Ad2CA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,AGTA;Ad2CA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,AGTA,ACHA;Af8CA,AYpCA,ALeA,AENA,ACHA,AGTA,AFMA,AGTA,ACHA;Af8CA,AYpCA,AHSA,ACHA,AGTA,AFMA,AGTA,ACHA;Af8CA,AYpCA,AHSA,ACHA,AGTA,AFMA,AGTA,ACHA,ACHA;AhBiDA,AYpCA,AHSA,ACHA,AGTA,AFMA,AGTA,ACHA,ACHA;AhBiDA,AYpCA,AHSA,ACHA,AGTA,AFMA,AGTA,ACHA,ACHA;AhBiDA,AYpCA,AHSA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AYpCA,AHSA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AYpCA,AHSA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AYpCA,AHSA,AIZA,ACHA,ACHA,ACHA,AENA,ADGA;AjBoDA,AYpCA,AHSA,AIZA,ACHA,ACHA,ACHA,AENA,ADGA;AjBoDA,AYpCA,AHSA,AIZA,ACHA,ACHA,ACHA,AENA,ADGA;ALgBA,AHSA,AIZA,ACHA,ACHA,ACHA,AENA,ACHA,AFMA;ALgBA,AHSA,AIZA,ACHA,ACHA,ACHA,AENA,ACHA,AFMA;ARyBA,AIZA,AENA,AIZA,AFMA;ARyBA,AIZA,AENA,AIZA,AFMA;ARyBA,AIZA,AENA,AIZA,AFMA;ARyBA,AIZA,AENA,AIZA,AFMA;ARyBA,AMlBA,AIZA,AFMA;ARyBA,AMlBA,AIZA,AFMA;ARyBA,AMlBA,AIZA,AFMA;ARyBA,AMlBA,AENA;ARyBA,AMlBA,AENA;ARyBA,AMlBA,AENA;ARyBA,AMlBA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA","file":"index.js","sourcesContent":["var __TEMP__ = require('./api/DefineComponent');var DefineComponent = __TEMP__['DefineComponent'];\nvar __TEMP__ = require('./api/InstanceInject/instanceConfig');var instanceConfig = __TEMP__['instanceConfig'];\nvar __TEMP__ = require('./api/navigateTo');var navigateTo = __TEMP__['navigateTo'];\nvar __TEMP__ = require('./api/RootComponent');var RootComponent = __TEMP__['RootComponent'];\nvar __TEMP__ = require('./api/SubComponent');var SubComponent = __TEMP__['SubComponent'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'DefineComponent', { enumerable: true, configurable: true, get: function() { return DefineComponent; } });Object.defineProperty(exports, 'instanceConfig', { enumerable: true, configurable: true, get: function() { return instanceConfig; } });Object.defineProperty(exports, 'navigateTo', { enumerable: true, configurable: true, get: function() { return navigateTo; } });Object.defineProperty(exports, 'RootComponent', { enumerable: true, configurable: true, get: function() { return RootComponent; } });Object.defineProperty(exports, 'SubComponent', { enumerable: true, configurable: true, get: function() { return SubComponent; } });\n//# sourceMappingURL=index.js.map","var __TEMP__ = require('./normalizeOptions');var normalizeOptions = __TEMP__['normalizeOptions'];\n/**\n * 把根组件选项和子组件选项转化为原生Component API选项并执行\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var DefineComponent = exports.DefineComponent = function (options) {\n    Component(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    normalizeOptions(options));\n};\n//# sourceMappingURL=index.js.map","var __TEMP__ = require('../../../behaviors/BbeforeCreated');var BBeforeCreate = __TEMP__['BBeforeCreate'];\nvar __TEMP__ = require('../../../behaviors/BStore');var BStore = __TEMP__['BStore'];\nvar __TEMP__ = require('../../../utils/isEmptyObject');var isEmptyObject = __TEMP__['isEmptyObject'];\nvar __TEMP__ = require('../../InstanceInject/instanceConfig');var instanceConfig = __TEMP__['instanceConfig'];\nvar __TEMP__ = require('./computedWatchHandle');var computedWatchHandle = __TEMP__['computedWatchHandle'];\nvar __TEMP__ = require('./hijackHandle');var hijack = __TEMP__['hijack'];\nvar __TEMP__ = require('./hijackHandle/isPageCheck');var isPageCheck = __TEMP__['isPageCheck'];\nvar __TEMP__ = require('./hijackHandle/loadReceivedDataHandle');var loadReceivedDataHandle = __TEMP__['loadReceivedDataHandle'];\nvar __TEMP__ = require('./hijackHandle/onLoadReceivedDataHandle');var onLoadReceivedDataHandle = __TEMP__['onLoadReceivedDataHandle'];\nvar __TEMP__ = require('./initStore');var initStore = __TEMP__['initStore'];\nvar __TEMP__ = require('./injectInfoHandler');var injectInfoHandler = __TEMP__['injectInfoHandler'];\nvar __TEMP__ = require('./internalFieldProtection');var InternalFieldProtection = __TEMP__['InternalFieldProtection'];\nvar __TEMP__ = require('./rootComponentOptionHandle');var rootComponentOptionHandle = __TEMP__['rootComponentOptionHandle'];\nvar __TEMP__ = require('./sameFuncOptionsHandle');var sameFuncOptionsHandle = __TEMP__['sameFuncOptionsHandle'];\nvar __TEMP__ = require('./subComponentsOptionHandle');var subComponentsOptionHandle = __TEMP__['subComponentsOptionHandle'];\n/**\n * 把DefineComponentOption转化为原生Component API支持的配置\n * @param defineComponentOption\n * @returns  返回符合原生Component API配置\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function normalizeOptions(defineComponentOption) {\n    const rootComponentOption = defineComponentOption.rootComponent;\n    const subComponentsOption = defineComponentOption.subComponents;\n    const finalOptionsForComponent = injectInfoHandler({\n        observers: {},\n        data: {},\n        methods: {},\n        // 加入BStore,处理store字段的behavior\n        behaviors: [BStore],\n        externalClasses: [],\n        pageLifetimes: {},\n        isPage: false,\n        properties: {},\n        computed: {},\n        watch: {},\n        lifetimes: {},\n        options: {},\n    }, instanceConfig.injectInfo);\n    /**\n     * 为了更高的效率,在处理rootComponentOption和subComponentsOption数据时,把相同字段配置(pageLifetimes，lifetimes,watch,observers)收集到funcOptions中。\n     * 后续再一起处理这些字段,整合进finalOptionsForComponent配置中。即funcConfig是一个临时中介对象。\n     */\n    const sameFuncOptions = {\n        pageLifetimes: {},\n        lifetimes: {},\n        watch: {},\n        observers: {},\n    };\n    if (rootComponentOption && !isEmptyObject(rootComponentOption)) {\n        rootComponentOptionHandle(finalOptionsForComponent, sameFuncOptions, rootComponentOption);\n    }\n    if (subComponentsOption && !isEmptyObject(subComponentsOption)) {\n        subComponentsOptionHandle(finalOptionsForComponent, subComponentsOption, sameFuncOptions);\n    }\n    sameFuncOptionsHandle(finalOptionsForComponent, rootComponentOption === null || rootComponentOption === void 0 ? void 0 : rootComponentOption.isPage, sameFuncOptions);\n    // 配置与内部字段冲突验证\n    InternalFieldProtection(finalOptionsForComponent);\n    // 对页面传入参数进行处理 老框架劫持页面methods.onLoad,新框架劫持页面pageLifetimes.load\n    if (finalOptionsForComponent.isPage) {\n        hijack(finalOptionsForComponent.pageLifetimes, \"load\", [loadReceivedDataHandle]);\n    }\n    hijack(finalOptionsForComponent.methods, \"onLoad\", [onLoadReceivedDataHandle]);\n    // 验证isPage字段是否配置正确\n    hijack(finalOptionsForComponent.lifetimes, \"attached\", [isPageCheck(rootComponentOption === null || rootComponentOption === void 0 ? void 0 : rootComponentOption.isPage)]);\n    // 页面时删除预设的虚拟组件字段\n    if (finalOptionsForComponent.isPage && finalOptionsForComponent.options) {\n        Reflect.deleteProperty(finalOptionsForComponent.options, \"virtualHost\");\n    }\n    // 初始化store数据到data并把store配置放入到data的__storeConfig__下为后续使用\n    initStore(finalOptionsForComponent);\n    // 处理computed和watch配置\n    computedWatchHandle(finalOptionsForComponent);\n    // BBeforeCreate在最后面,让BeforeCreate生命周期运行在最终建立组件时。\n    finalOptionsForComponent.behaviors.push(BBeforeCreate);\n    return finalOptionsForComponent;\n};exports.normalizeOptions = normalizeOptions\n//# sourceMappingURL=index.js.map","/**\n * 增加beforeCreate生命周期函数,便于测试\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var BBeforeCreate = exports.BBeforeCreate = Behavior({\n    // @ts-ignore\n    definitionFilter(options) {\n        // 触发beforeCreate生命周期函数  options.lifetimes在之前被赋值过默认{}所以！\n        const beforeCreateFunc = options.lifetimes.beforeCreate;\n        if (beforeCreateFunc) {\n            beforeCreateFunc.call(undefined, options);\n        }\n    },\n});\n//# sourceMappingURL=BbeforeCreated.js.map","var __TEMP__ = require('../utils/deepEqual');var deepEqual = __TEMP__['deepEqual'];\nvar __TEMP__ = require('../utils/isEmptyObject');var isEmptyObject = __TEMP__['isEmptyObject'];\nfunction reactionRegister(storeConfig) {\n    const unequalData = {};\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { comparer, reaction, toJS } = require(\"mobx\");\n    // 存储reaction的disposer 需要保护内部字段验证\n    this.disposer = {};\n    for (const key in storeConfig) {\n        const currentStoreValue = toJS(storeConfig[key]());\n        /* istanbul ignore next 没办法测试啊,在打开一个页面后退回,修改store,再打开相同页面是会出现store数据不准确的问题*/\n        // @ts-ignore this.data[key]一定存在\n        if (!deepEqual(currentStoreValue, this.data[key])) {\n            unequalData[key] = currentStoreValue;\n        }\n        // 添加响应式逻辑\n        this.disposer[key] = reaction(storeConfig[key], (value) => {\n            this.setData({\n                [key]: toJS(value),\n            });\n        }, {\n            equals: comparer.structural,\n        });\n    }\n    delete this.data.__storeConfig__;\n    /* istanbul ignore next  */\n    if (!isEmptyObject(unequalData))\n        this.setData(unequalData);\n}\n/**\n * 在attached(1.7.5之前在created中)生命周期中,建立store数据的reaction\n * 在detached生命周期中,清除store数据\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var BStore = exports.BStore = Behavior({\n    lifetimes: {\n        attached() {\n            // 此时store数据已初始化到data中(initStore)\n            const storeConfig = this.data.__storeConfig__;\n            if (!storeConfig)\n                return;\n            reactionRegister.call(this, storeConfig);\n        },\n        detached() {\n            /* istanbul ignore next 清除store数据 test中模拟了测试，所以忽略 框架(1.6.1)不支持 issue {@link https://github.com/wechat-miniprogram/miniprogram-simulate/issues/110}*/\n            for (const key in this.disposer) {\n                this.disposer[key]();\n            }\n        },\n    },\n});\n//# sourceMappingURL=BStore.js.map","function isSameType(a, b) {\n    return Object.prototype.toString.call(a) === Object.prototype.toString.call(b);\n}\n// 定义一个辅助函数，用于判断两个对象的属性数量是否相同\nfunction isSameSize(a, b) {\n    return Object.keys(a).length === Object.keys(b).length;\n}\n// 定义一个辅助函数，用于判断两个函数的代码是否相同\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nfunction isSameCode(a, b) {\n    // 去除空格比较函数字符串\n    return a.toString().split(\" \").join(\"\") === b.toString().split(\" \").join(\"\");\n}\n// 定义一个辅助函数，用于判断两个日期的时间戳是否相同\nfunction isSameTime(a, b) {\n    return a.getTime() === b.getTime();\n}\n// 定义一个辅助函数，用于判断两个正则表达式的模式和标志是否相同\nfunction isSamePattern(a, b) {\n    return a.source === b.source && a.flags === b.flags;\n}\n/**\n * 深度判断两个值是否相等,有一个值为非对象类型即使用Object.is判断。\n * 不支持原型上的属性\n * 两个函数使用toString()比较\n * 支持Date,RegExp\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function deepEqual(a, b) {\n    // 如果两个值是原始类型或null，直接用Object.is比较\n    if (a === null || b === null || typeof a !== \"object\" || typeof b !== \"object\") {\n        if (typeof a !== \"function\" || typeof b !== \"function\") {\n            return Object.is(a, b);\n        }\n    }\n    // 如果两个值是对象类型，先判断它们的类型、构造函数和属性数量是否相同\n    if (!isSameType(a, b) || a.constructor !== b.constructor || !isSameSize(a, b)) {\n        return false;\n    }\n    // 如果两个值是函数类型，再判断它们的代码是否相同\n    if (typeof a === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n        return isSameCode(a, b);\n    }\n    // 如果两个值是日期类型，再判断它们的时间戳是否相同\n    if (a instanceof Date) {\n        return isSameTime(a, b);\n    }\n    // // 如果两个值是正则表达式类型，再判断它们的模式和标志是否相同\n    if (a instanceof RegExp) {\n        return isSamePattern(a, b);\n    }\n    // 对于其他对象类型，递归地比较它们的每个属性和值是否深度相等\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n    for (const key of keysA) {\n        if (keysB.includes(key)) {\n            // @ts-ignore\n            if (!deepEqual(a[key], b[key])) {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    // 如果以上的条件都满足，说明两个值是深度相等的\n    return true;\n};exports.deepEqual = deepEqual\n//# sourceMappingURL=deepEqual.js.map","/**\n * 判断一个值是否为空对象 `{}`\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function isEmptyObject(obj) {\n    if (typeof obj !== \"object\" || obj === null || Array.isArray(obj) || obj instanceof Set || obj instanceof Map\n        || obj instanceof WeakSet || obj instanceof WeakMap) {\n        return false;\n    }\n    return Reflect.ownKeys(obj).length === 0;\n};exports.isEmptyObject = isEmptyObject\n//# sourceMappingURL=isEmptyObject.js.map","/**\n * 实例配置接口\n */\nclass InstanceConfig {\n    constructor() {\n        this.info = {};\n    }\n    get injectInfo() {\n        return this.info.injectInfo;\n    }\n    setInjectInfo(info) {\n        if (info)\n            this.info.injectInfo = info;\n    }\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var instanceConfig = exports.instanceConfig = new InstanceConfig();\n//# sourceMappingURL=instanceConfig.js.map","var __TEMP__ = require('../../../../utils/deepEqual');var deepEqual = __TEMP__['deepEqual'];\nvar __TEMP__ = require('./computedUpdater');var computedUpdater = __TEMP__['computedUpdater'];\nvar __TEMP__ = require('./getPathsValue');var getPathsValue = __TEMP__['getPathsValue'];\nvar __TEMP__ = require('./getPropertiesValue');var getPropertiesValue = __TEMP__['getPropertiesValue'];\nvar __TEMP__ = require('./initComputedAndGetCache');var initComputedAndGetCache = __TEMP__['initComputedAndGetCache'];\nvar __TEMP__ = require('../../../../utils/assertNonNullable');var assertNonNullable = __TEMP__['assertNonNullable'];\nvar __TEMP__ = require('../../../../utils/deepClone');var deepClone = __TEMP__['deepClone'];\nvar __TEMP__ = require('../../../../utils/isEmptyObject');var isEmptyObject = __TEMP__['isEmptyObject'];\nfunction initWatchOldValue(data, watchConfig) {\n    const watchOldValue = {};\n    for (const key in watchConfig) {\n        // @ts-ignore 隐式索引\n        watchOldValue[key] = deepClone(getPathsValue(data, key));\n    }\n    return watchOldValue;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function computedWatchHandle(options) {\n    // 计算属性初始化和首次依赖收集\n    const computedConfig = options.computed;\n    const rawPropertiesValue = getPropertiesValue(options.properties);\n    if (computedConfig && !isEmptyObject(computedConfig)) {\n        // 此时store已经初始化数据到data了(__storeConfig__)\n        const __computedInitCache__ = initComputedAndGetCache(options, computedConfig, Object.assign(Object.assign({}, options.data), rawPropertiesValue));\n        // 缓存放入data中\n        options.data.__computedCache__ = __computedInitCache__;\n        // 计算属性更新函数放入methods中 要做冲突判断,避免用户定义了同名methods字段\n        options.methods.__computedUpdater__ = computedUpdater;\n    }\n    const observersConfig = options.observers;\n    // 通过observers加入`**`字段来触发计算属性更新\n    const originalFunc = observersConfig[\"**\"];\n    observersConfig[\"**\"] = function () {\n        var _a;\n        // 任何setData都会触发计算属性更新(可能依赖数据并没变化)\n        (_a = this.__computedUpdater__) === null || _a === void 0 ? void 0 : _a.call(this);\n        originalFunc === null || originalFunc === void 0 ? void 0 : originalFunc.call(this);\n    };\n    // watch handle\n    const watchConfig = options.watch;\n    if (watchConfig && !isEmptyObject(watchConfig)) {\n        const data = options.data;\n        data.__watchOldValue__ = initWatchOldValue(Object.assign(Object.assign({}, data), rawPropertiesValue), watchConfig);\n        const observersConfig = options.observers;\n        for (const key in watchConfig) {\n            const watchHadle = watchConfig[key];\n            const originObserversHandle = observersConfig[key];\n            // 在监控多个数据时,参数是多个值\n            observersConfig[key] = function (...newValue) {\n                originObserversHandle === null || originObserversHandle === void 0 ? void 0 : originObserversHandle.call(this, ...newValue);\n                const watchOldValue = assertNonNullable(this.data.__watchOldValue__);\n                const oldValue = watchOldValue[key];\n                if (deepEqual(newValue, oldValue))\n                    return;\n                watchOldValue[key] = deepClone(newValue);\n                watchHadle.call(this, ...newValue, ...oldValue);\n            };\n        }\n    }\n};exports.computedWatchHandle = computedWatchHandle\n//# sourceMappingURL=index.js.map","var __TEMP__ = require('../../../../utils/deepEqual');var deepEqual = __TEMP__['deepEqual'];\nvar __TEMP__ = require('./data-tracer');var deepProxy = __TEMP__['deepProxy'];var getProxyOriginalValue = __TEMP__['getProxyOriginalValue'];\nvar __TEMP__ = require('./dependencesOptimize');var removeSubDependences = __TEMP__['removeSubDependences'];\nvar __TEMP__ = require('./getPathsValue');var getPathsValue = __TEMP__['getPathsValue'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function computedUpdater(isUpdated = false) {\n    for (const key in this.data.__computedCache__) {\n        const itemCache = this.data.__computedCache__[key];\n        let changed = false;\n        for (const dep of itemCache.dependences) {\n            // getPathsValue返回的是数组\n            const curVal = getPathsValue(this.data, dep.paths.join(\".\"))[0];\n            // 检查依赖是否更新\n            if (!deepEqual(curVal, dep.val)) {\n                changed = true;\n                break;\n            }\n        }\n        if (changed) {\n            const newDependences = [];\n            const newValue = itemCache.method.call({ data: deepProxy(this.data, newDependences) });\n            // 更新值不会立即再次进入**函数,而是当前**函数运行完毕后触发**函数,\n            this.setData({\n                [key]: getProxyOriginalValue(newValue),\n            });\n            isUpdated = true;\n            // 更新依赖(优化)\n            this.data.__computedCache__[key].dependences = removeSubDependences(newDependences);\n            // 有一个计算属性更新就重新更新所有计算互相,避免后置依赖导致前置依赖错误\n            return computedUpdater.call(this, isUpdated);\n        }\n    }\n    return isUpdated;\n};exports.computedUpdater = computedUpdater\n//# sourceMappingURL=computedUpdater.js.map","var __TEMP__ = require('./dependencesOptimize');var removePreviousDependence = __TEMP__['removePreviousDependence'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function deepProxy(data, dependences, basePath = []) {\n    const handler = {\n        get(target, prop) {\n            if (prop === \"__original__\") {\n                return target;\n            }\n            const val = target[prop];\n            // 自身没有但原型链上有的属性不收集依赖\n            if (prop in target && !Object.prototype.hasOwnProperty.call(target, prop)) {\n                return typeof val === \"function\" ? val.bind(target) : val;\n            }\n            removePreviousDependence(dependences, basePath);\n            const curPath = basePath.concat(prop);\n            dependences.push({ paths: curPath, val });\n            // 非对象不代理\n            if (typeof val !== \"object\" || val === null)\n                return val;\n            return deepProxy(val, dependences, curPath);\n        },\n        set(_target, prop) {\n            throw Error(`${prop}字段是只读的`);\n        },\n    };\n    return new Proxy(data, handler);\n};exports.deepProxy = deepProxy\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function getProxyOriginalValue(value) {\n    if (typeof value !== \"object\" || value === null) {\n        return value;\n    }\n    if (value.__original__)\n        return value.__original__;\n    const ret = Array.isArray(value) ? [] : {};\n    for (const key in value) {\n        // @ts-ignore 隐式索引\n        ret[key] = getProxyOriginalValue(value[key]);\n    }\n    return ret;\n};exports.getProxyOriginalValue = getProxyOriginalValue\n//# sourceMappingURL=data-tracer.js.map","// 去除子依赖\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function removeSubDependences(dependences) {\n    // 把dependences按照路径长度排序\n    dependences.sort((a, b) => a.paths.length - b.paths.length);\n    // 从最长的路径开始遍历,如果当前路径是上一个路径的子路径,则删除当前路径\n    for (let f = 0; f < dependences.length; f++) {\n        const sortPath = dependences[f].paths.toString();\n        // 从后往前遍历,删除子依赖,保留父依赖\n        for (let i = dependences.length - 1; i > f; i--) {\n            const curPath = dependences[i].paths.toString();\n            if (curPath.startsWith(sortPath)) {\n                dependences.splice(i, 1);\n            }\n        }\n    }\n    return dependences;\n};exports.removeSubDependences = removeSubDependences\n// 当前依赖是上一个依赖的子依赖时,去除上一个依赖\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function removePreviousDependence(dependences, basePath) {\n    if (dependences.length === 0 || basePath.length === 0)\n        return dependences;\n    const lastDependence = dependences[dependences.length - 1];\n    if (lastDependence.paths.toString() === basePath.toString()) {\n        dependences.pop();\n    }\n    return dependences;\n};exports.removePreviousDependence = removePreviousDependence\n//# sourceMappingURL=dependencesOptimize.js.map","/**\n * 获取指定paths的值\n * @param this  - 组件实例 Instance\n * @param paths - 支持多字段(用`,`分开) 例如 'obj.xxx,a,b.**' 监控了3个字段\n * @returns unknown[] 每项对应paths每项的值\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function getPathsValue(data, paths) {\n    const valueList = [];\n    // ['obj.xxx','a','b.**'].forEach\n    paths.split(\",\").forEach(path => {\n        // path : 'obj.xxx' | 'a' | 'b.**'\n        if (path.includes(\".**\")) {\n            // \"b.**\" => 'b'\n            path = path.slice(0, -3);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const value = path.split(\".\").reduce((pre, path) => {\n            // pre有可能为undefined|null,比如obj是未初始化的计算属性(undefined),还有可能是properties的对象类型(默认为null)\n            try {\n                return pre[path];\n            }\n            catch (_a) {\n                return undefined;\n            }\n        }, data);\n        valueList.push(value);\n    });\n    return valueList;\n};exports.getPathsValue = getPathsValue\n//# sourceMappingURL=getPathsValue.js.map","function getRequiredSingleValue(PropType) {\n    switch (PropType) {\n        case String:\n            return \"\";\n        case Number:\n            return 0;\n        case Array:\n            return [];\n        case Object:\n            return null;\n        case Boolean:\n            return false;\n        default:\n            /* istanbul ignore next */\n            throw Error(\"properties字段类型只能为 String | Number | Array | Object | Boolean \");\n    }\n}\nfunction IsRequiredSingle(config) {\n    return config instanceof Function;\n}\nfunction IsRequiredUnion(config) {\n    return !Reflect.has(config, \"value\");\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function getPropertiesValue(propertiesOpt) {\n    if (propertiesOpt === undefined)\n        return;\n    const result = {};\n    for (const key in propertiesOpt) {\n        const config = propertiesOpt[key];\n        if (IsRequiredSingle(config)) {\n            // @ts-ignore 隐式索引\n            result[key] = getRequiredSingleValue(config);\n        }\n        else if (IsRequiredUnion(config)) {\n            // @ts-ignore 隐式索引\n            result[key] = getRequiredSingleValue(config.type);\n        }\n        else {\n            // @ts-ignore 隐式索引\n            result[key] = config.value;\n        }\n    }\n    return result;\n};exports.getPropertiesValue = getPropertiesValue\n//# sourceMappingURL=getPropertiesValue.js.map","var __TEMP__ = require('./data-tracer');var deepProxy = __TEMP__['deepProxy'];var getProxyOriginalValue = __TEMP__['getProxyOriginalValue'];\nvar __TEMP__ = require('./dependencesOptimize');var removeSubDependences = __TEMP__['removeSubDependences'];\n/**\n * 如果依赖列表某项的首个字段值为undefined并且字段为其他计算属性字段(即被依赖的计算字段写在了依赖他的计算字段后面) 返回false, 否则返回true表示依赖有效。\n */\nfunction isValidDependences(dependences, computedKeys) {\n    for (const { paths: path, val } of dependences) {\n        if ((val === undefined) && computedKeys.includes(path[0])) {\n            return false;\n        }\n    }\n    // 依赖有效\n    return true;\n}\n/**\n * 把计算属性初始值加入到options.data中并返回缓存(递归函数)\n * @param options - 配置选项\n * @param computedConfig - 计算字段配置\n * @param initAllData - 初始化时全部的data包含(properties,data,和已经初始化后的computed字段)\n * @param uninitedkeys - 未初始化的key (默认为所有computedConfig的key)\n * @param computedCache - 返回的所有计算字段缓存(默认为空对象)\n * @returns  `computedCache` 计算字段缓存\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function initComputedAndGetCache(options, computedConfig, initAllData, uninitedkeys = Object.keys(computedConfig), computedCache = {}) {\n    for (const key of uninitedkeys) {\n        const computedFunc = computedConfig[key];\n        const dependences = [];\n        // 通过代理data获取计算字段的初始值和依赖\n        let initValue = computedFunc.call({ data: deepProxy(initAllData, dependences) });\n        // 去除当前已初始的计算属性key\n        uninitedkeys = uninitedkeys.filter(ele => ele !== key);\n        // 验证依赖是否有效\n        if (isValidDependences(dependences, uninitedkeys)) {\n            initValue = getProxyOriginalValue(initValue);\n            // 把计算属性初始值加入到options.data中\n            options.data[key] = initValue;\n            // 把计算属性初始值加入到initAllData中,后续其他计算属性依赖时会可能会用到\n            initAllData[key] = initValue;\n            computedCache[key] = {\n                dependences: removeSubDependences(dependences),\n                method: computedFunc,\n                value: initValue,\n            };\n        }\n        else {\n            // 把当前依赖不正确的key放到后面去\n            uninitedkeys.push(key);\n        }\n    }\n    // 看uninitedkey是否未空，空表示所有依赖收集完毕直接返回\n    if (uninitedkeys.length === 0) {\n        return computedCache;\n    }\n    // uninitedkey不为空,递归\n    return initComputedAndGetCache(options, computedConfig, initAllData, uninitedkeys, computedCache);\n};exports.initComputedAndGetCache = initComputedAndGetCache\n//# sourceMappingURL=initComputedAndGetCache.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function assertNonNullable(value) {\n    /* istanbul ignore next  */\n    if (value === null || value === undefined) {\n        throw new Error(`${value} should not be null or undefined`);\n    }\n    return value;\n};exports.assertNonNullable = assertNonNullable\n//# sourceMappingURL=assertNonNullable.js.map","/**\n * 深度克隆 函数相同 原型一致\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function deepClone(value) {\n    if (typeof value !== \"object\" || value === null || value instanceof RegExp) {\n        return value;\n    }\n    const clone = (Array.isArray(value) ? [] : {});\n    Object.setPrototypeOf(clone, Object.getPrototypeOf(value));\n    for (const key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n            clone[key] = deepClone(value[key]);\n        }\n    }\n    return clone;\n};exports.deepClone = deepClone\n//# sourceMappingURL=deepClone.js.map","/**\n * 劫持指定配置字段,在原有配置前执行指定函数\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function hijack(config, field, before) {\n    // @ts-ignore 隐式索引\n    const originalFunc = config[field];\n    // @ts-ignore 隐式索引\n    config[field] = function (...args) {\n        before.forEach(func => func.call(this, ...args));\n        if (originalFunc)\n            originalFunc.apply(this, args);\n        // after.forEach(func => func.call(this, ...args));\n    };\n    return;\n};exports.hijack = hijack\n//# sourceMappingURL=index.js.map","/**\n * 劫持attached,根据this.route做判断 isPage值是否正确\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function isPageCheck(isPage) {\n    return function () {\n        const route = this.route;\n        if (route && isPage !== true) {\n            // 页面isPage值错误\n            throw Error(`页面 /${route} 中, RootComponent构建页面时,isPage字段值应为 true`);\n        }\n        if (!route && isPage !== false && isPage !== undefined) {\n            // 组件写了isPage = true\n            throw Error(`组件 ${this.is} 中  RootComponent构建组件时,可不写isPage字段或值为 false`);\n        }\n    };\n};exports.isPageCheck = isPageCheck\n//# sourceMappingURL=isPageCheck.js.map","/**\n * 针对通过 navigateTo传过来的数据对组件load周期传入数据解析\n * @param option - option中的url是拼接了encodeURIComponent转码的data对象的,key为INNERMARKER.url\n */\nvar __TEMP__ = require('../../../../utils/InnerMarker');var INNERMARKER = __TEMP__['INNERMARKER'];\n/* istanbul ignore next miniprogram-simulate(当前版本 1.6.1) 无法测试load */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function loadReceivedDataHandle(option) {\n    const innerData = option[INNERMARKER.url];\n    // 未使用自定义的navigateTo\n    if (innerData === undefined)\n        return;\n    // 使用navigateTo API\n    const decodeOption = JSON.parse(decodeURIComponent(innerData));\n    for (const key in decodeOption) {\n        option[key] = decodeOption[key];\n    }\n    // 给onLoad劫持函数一个标记,判断在新框架下已经被解析过了\n    option[INNERMARKER.url] = INNERMARKER.url;\n};exports.loadReceivedDataHandle = loadReceivedDataHandle\n//# sourceMappingURL=loadReceivedDataHandle.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var INNERMARKER = exports.INNERMARKER = {\n    url: \"__annil__\", // url默认传值Data字段\n};\n//# sourceMappingURL=InnerMarker.js.map","/**\n * 原生Component会对传入的对象字段匹配的properties字段setData赋值。不符合字段或Page时不会赋值。\n * 此函数为给实例setData赋值,默认传递值与properties相符(ts类型安全)。\n * @param option - 传入onLoad的参数 有以下两种可能\n * 1. 使用wx.navigateTo传值的。这种情况无内置字段 option[INNERMARKER.url] 等于 undefined\n * 2. 使用插件提供的navigateTo传值。这种情况 INNERMARKER.url被load周期劫持函数解码后赋值INNERMARKER.url字段为本身,即option[INNERMARKER.url] 等于 INNERMARKER.url\n */\nvar __TEMP__ = require('../../../../utils/InnerMarker');var INNERMARKER = __TEMP__['INNERMARKER'];\n/* istanbul ignore next miniprogram-simulate(当前版本 1.6.1) 无法测试页面生命周期 */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function onLoadReceivedDataHandle(option) {\n    const innerData = option[INNERMARKER.url];\n    // 情况1为undefined,2为INNERMARKER.url有值但不是本身,说明是老框架。3所以innerData等于 INNERMARKER.url即有组件配置了load(新框架在pageLifetimes.load中提前解析了)\n    if (innerData === undefined)\n        return;\n    if (innerData !== INNERMARKER.url) {\n        // 需要情况2 需要解析\n        const decodeOption = JSON.parse(decodeURIComponent(innerData));\n        for (const key in decodeOption) {\n            option[key] = decodeOption[key];\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete option[INNERMARKER.url];\n    this.setData(option);\n};exports.onLoadReceivedDataHandle = onLoadReceivedDataHandle\n//# sourceMappingURL=onLoadReceivedDataHandle.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function initStore(finalOptionsForComponent) {\n    const storeConfig = finalOptionsForComponent.store;\n    if (storeConfig) {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const { toJS } = require(\"mobx\");\n        for (const key in storeConfig) {\n            finalOptionsForComponent.data[key] = toJS(storeConfig[key]());\n            // 把响应式数据配置保留在methods的__storeConfig__字段下带入到组件实例中(不用函数返回方式也可以,但不符合methods字段类型),后续再从原型上删除。\n        }\n        finalOptionsForComponent.data.__storeConfig__ = storeConfig;\n        delete finalOptionsForComponent.store;\n    }\n};exports.initStore = initStore\n//# sourceMappingURL=index.js.map","/**\n * 把injectInfo字段合并到finalOptionsForComponent\n * @remarks 规则：\n * 1. behaviors字段 push\n * 2. 对象字段 没有的话直接赋值，有的话Object.assign\n * @param finalOptionsForComponent\n * @param injectInfo\n * @returns finalOptionsForComponent\n */\nfunction mergeOptions(finalOptionsForComponent, injectInfo) {\n    for (const key in injectInfo) {\n        const injectVal = injectInfo[key];\n        if (key in finalOptionsForComponent) {\n            // @ts-ignore\n            const originalVal = finalOptionsForComponent[key];\n            switch (key) {\n                case \"behaviors\":\n                    {\n                        // @ts-ignore behaviors 是数组类型\n                        finalOptionsForComponent[key].push(...injectVal);\n                    }\n                    break;\n                default:\n                    {\n                        // @ts-ignore 覆盖目标\n                        finalOptionsForComponent[key] = Object.assign(originalVal, injectVal);\n                    }\n                    break;\n            }\n        }\n        else {\n            // @ts-ignore\n            finalOptionsForComponent[key] = injectVal;\n        }\n    }\n    return finalOptionsForComponent;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function injectInfoHandler(finalOptionsForComponent, injectInfo) {\n    if (!injectInfo)\n        return finalOptionsForComponent;\n    return mergeOptions(finalOptionsForComponent, injectInfo);\n};exports.injectInfoHandler = injectInfoHandler\n//# sourceMappingURL=injectInfoHandler.js.map","// 内部字段\nconst internalFiled = {\n    methods: [\"disposer\", \"__computedUpdater__\"],\n    data: [\"__computedCache__\", \"__storeConfig__\", \"__watchOldValue__\"],\n};\n/**\n * 报错的形式避免输入字段和内部字段冲突,保证config下不包含内部预定字段(列表)\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function InternalFieldProtection(finalOptionsForComponent) {\n    const methodsFieldKeys = Object.keys(finalOptionsForComponent.methods);\n    const dataFieldKeys = Object.keys(finalOptionsForComponent.data);\n    for (const key of methodsFieldKeys) {\n        if (internalFiled.methods.includes(key)) {\n            throw Error(`methods配置中的${key}字段已被内部字段占用`);\n        }\n    }\n    for (const key of dataFieldKeys) {\n        if (internalFiled.data.includes(key)) {\n            /* istanbul ignore next 同上*/\n            throw Error(`data配置中的${key}字段已被内部字段占用`);\n        }\n    }\n};exports.InternalFieldProtection = InternalFieldProtection\n//# sourceMappingURL=internalFieldProtection.js.map","var __TEMP__ = require('./customEventsHandle');var customEventsHandle = __TEMP__['customEventsHandle'];\nvar __TEMP__ = require('./otherFieldsHandle');var otherFieldsHandle = __TEMP__['otherFieldsHandle'];\nvar __TEMP__ = require('./sameFuncFieldsCollect');var sameFuncFieldsCollect = __TEMP__['sameFuncFieldsCollect'];\n/**\n * 收集 rootComponentOptions 配置到 finalOptions 和 funcOptions 中\n * @param finalOptions - 收集配置对象\n * @param funcOptions  - 收集特殊配置对象字段\n * @param rootComponentOptions - 被收集的源配置对象\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function rootComponentOptionHandle(finalOptions, funcOptions, rootComponentOptions) {\n    if (rootComponentOptions.customEvents)\n        customEventsHandle(finalOptions.methods, rootComponentOptions.customEvents);\n    if (rootComponentOptions.events)\n        Object.assign(finalOptions.methods, rootComponentOptions.events);\n    sameFuncFieldsCollect(rootComponentOptions, funcOptions);\n    otherFieldsHandle(finalOptions, rootComponentOptions);\n};exports.rootComponentOptionHandle = rootComponentOptionHandle\n//# sourceMappingURL=rootComponentOptionHandle.js.map","// 类型守卫\nfunction IsFullCustomEvents(customEventOptions) {\n    return Object.prototype.toString.call(customEventOptions) === \"[object Object]\";\n}\n/**\n * 把customEvents字段配置变成函数放入到componentOptions.methods中\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function customEventsHandle(methods, customEventsConfig) {\n    for (const key in customEventsConfig) {\n        const customEventOptions = customEventsConfig[key];\n        if (IsFullCustomEvents(customEventOptions)) {\n            methods[key] = function (detail) {\n                this.triggerEvent(key, detail, customEventOptions.options);\n            };\n        }\n        else {\n            methods[key] = function (detail) {\n                this.triggerEvent(key, detail);\n            };\n        }\n    }\n};exports.customEventsHandle = customEventsHandle\n//# sourceMappingURL=customEventsHandle.js.map","/**\n * 其他字段加入到componentOptions对应字段配置中\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function otherFieldsHandle(finalOptions, rootComponentOptions) {\n    for (const key in rootComponentOptions) {\n        // @ts-ignore 隐式索引\n        const config = rootComponentOptions[key];\n        if (Array.isArray(config) === true) {\n            //  \"behaviors\" || \"externalClasses\"是数组\n            // @ts-ignore 只有 behaviors 和 externalClasses, 且都默认为[]\n            finalOptions[key].push(...config);\n        }\n        else if (typeof config === \"object\") {\n            // @ts-ignore 隐式索引\n            Object.assign(finalOptions[key] || (finalOptions[key] = {}), config);\n        }\n        else {\n            // 函数字段有 根组件有 `export` 子组件无此字段\n            // @ts-ignore 隐式索引\n            finalOptions[key] = config;\n        }\n    }\n};exports.otherFieldsHandle = otherFieldsHandle\n//# sourceMappingURL=otherFieldsHandle.js.map","/**\n * 把配置为函数的字段方法收集到funcOptions中\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function sameFuncFieldsCollect(options, funcOptions) {\n    var _a;\n    let key;\n    for (key in funcOptions) {\n        const optionsKeyConfig = options[key];\n        if (optionsKeyConfig) {\n            for (const _key in optionsKeyConfig) {\n                // @ts-ignore\n                ((_a = funcOptions[key])[_key] || (_a[_key] = [])).push(optionsKeyConfig[_key]);\n            }\n        }\n    }\n};exports.sameFuncFieldsCollect = sameFuncFieldsCollect\n//# sourceMappingURL=sameFuncFieldsCollect.js.map","var __TEMP__ = require('../../../utils/isEmptyObject');var isEmptyObject = __TEMP__['isEmptyObject'];\n/**\n * 把函数配置放入一个配置中依次运行\n */\nfunction _sameFuncOptionsHandle(config, configList) {\n    for (const key in configList) {\n        // @ts-ignore 隐式索引\n        config[key] = function (...args) {\n            configList[key].forEach(ele => ele.call(this, ...args));\n        };\n    }\n}\n/**\n * 把函数列表配置放入一个配置中循环依次运行\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function sameFuncOptionsHandle(finalOptionsForComponent, isPage, funcOptions) {\n    if (isPage) {\n        // 页面时 生命周期方法(即 on 开头的方法),(https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html)\n        if (!isEmptyObject(funcOptions.pageLifetimes)) {\n            _sameFuncOptionsHandle(finalOptionsForComponent.methods, funcOptions.pageLifetimes);\n        }\n    }\n    else {\n        // 组件时\n        if (!isEmptyObject(funcOptions.pageLifetimes)) {\n            _sameFuncOptionsHandle(finalOptionsForComponent.pageLifetimes, funcOptions.pageLifetimes);\n        }\n    }\n    if (funcOptions.lifetimes)\n        _sameFuncOptionsHandle(finalOptionsForComponent.lifetimes || (finalOptionsForComponent.lifetimes = {}), funcOptions.lifetimes);\n    if (funcOptions.watch)\n        _sameFuncOptionsHandle(finalOptionsForComponent.watch || (finalOptionsForComponent.watch = {}), funcOptions.watch);\n};exports.sameFuncOptionsHandle = sameFuncOptionsHandle\n//# sourceMappingURL=sameFuncOptionsHandle.js.map","var __TEMP__ = require('./otherFieldsHandle');var otherFieldsHandle = __TEMP__['otherFieldsHandle'];\nvar __TEMP__ = require('./sameFuncFieldsCollect');var sameFuncFieldsCollect = __TEMP__['sameFuncFieldsCollect'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function subComponentsOptionHandle(componentOptions, subComponents, funcOptions) {\n    subComponents.forEach((subOption) => {\n        if (subOption.events)\n            Object.assign(componentOptions.methods, subOption.events);\n        sameFuncFieldsCollect(subOption, funcOptions);\n        otherFieldsHandle(componentOptions, subOption);\n    });\n};exports.subComponentsOptionHandle = subComponentsOptionHandle\n//# sourceMappingURL=subComponentsOptionHandle.js.map","var __TEMP__ = require('../utils/InnerMarker');var INNERMARKER = __TEMP__['INNERMARKER'];\n/**\n *  对象中可以使用 `\"; / ? : @ & = + $ `, #\"做为数据的一部分\n */\nfunction _encodeURIComponent(option) {\n    const result = {\n        url: `${option.url}?${INNERMARKER.url}=${encodeURIComponent(JSON.stringify(option.data))}`,\n    };\n    Reflect.deleteProperty(option, \"url\");\n    Reflect.deleteProperty(option, \"data\");\n    return Object.assign(result, option);\n}\n/**\n * 页面onload参数中接受的数据值是传递的url解析后的字符串。例如:A页面通过`wx.navigateTo({url:'/pages/test/test?num=123&obj={\"name\":\"zhao\"}'})`\n * test页面onLoad(data)的参数data接受内容为` data = {num:\"123\",obj:\"{\"name\":\"zhao\"}\"}`即默认的url传的数据值为字符串,需要在接收时自行解析(JSON.parse)。且url采取ASCII编码只能接受0x20-0x7e区间的符号。无法使用一些特殊符号 如 ` :/?#[]@!$&'()*+,;= `。\n * navigateTo API 为 wx.navigateTo的语法糖,增加了data字段,最终的url数据拼接了通过encodeURIComponent编码(支持默认忽略的特殊符号)的data字段,在跳转页面的onload中通过decodeURIComponent解析url赋值给实例的data对象。为求使用时更加方便(无需对参数data解析再赋值)。且有ts类型提示。\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function navigateTo(option) {\n    // @ts-ignore 隐式索引\n    if (!option.data) {\n        return wx.navigateTo(option);\n    }\n    else {\n        return wx.navigateTo(_encodeURIComponent(option));\n    }\n};exports.navigateTo = navigateTo\n//# sourceMappingURL=navigateTo.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function RootComponent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (options) => options;\n};exports.RootComponent = RootComponent\n//# sourceMappingURL=index.js.map","/**\n * 子组件构建函数\n * @returns `(options:) => SubComponentDoc`\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function SubComponent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return ((options) => options);\n};exports.SubComponent = SubComponent\n//# sourceMappingURL=index.js.map"]}